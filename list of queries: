
most_attended_competitions_in_single_month: 
SELECT
    attended_within_month,
    '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
    month_name,
    competitions_year,
    competition_links
FROM (
    SELECT
        COUNT(*) AS attended_within_month,
        personId,
        TO_CHAR(TO_DATE(year || '-' || month || '-01', 'YYYY-MM-DD'), 'Month') AS month_name,
        year AS competitions_year,
        LISTAGG(
            '[' || competition.cellName || '](https://www.worldcubeassociation.org/competitions/' || competition.id || ')',
            ', '
        ) WITHIN GROUP (ORDER BY year, month, day) AS competition_links
    FROM (
        SELECT DISTINCT competitionId, personId
        FROM Results
    ) results
    JOIN Competitions competition 
        ON competition.id = results.competitionId
    GROUP BY personId, year, month
    HAVING COUNT(*) >= 4
) comps_within_single_month_by_person
JOIN Persons person 
    ON person.id = comps_within_single_month_by_person.personId 
    AND person.subId = 1
ORDER BY attended_within_month DESC, person.name;

most_attended_competitions_in_single_week:
SELECT
    attended_within_week,
    '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
    year,
    week_number,
    competition_links
FROM (
    SELECT
        COUNT(*) AS attended_within_week,
        personId,
        year,
        TO_CHAR(TO_DATE(year || '-' || month || '-' || day, 'YYYY-MM-DD'), 'IW') AS week_number,
        LISTAGG(
            '[' || competition.cellName || '](https://www.worldcubeassociation.org/competitions/' || competition.id || ')',
            ', '
        ) WITHIN GROUP (ORDER BY year, month, day) AS competition_links
    FROM (
        SELECT DISTINCT competitionId, personId
        FROM Results
    ) results
    JOIN Competitions competition 
        ON competition.id = results.competitionId
    GROUP BY personId, year, TO_CHAR(TO_DATE(year || '-' || month || '-' || day, 'YYYY-MM-DD'), 'IW')
    HAVING COUNT(*) >= 1
) comps_within_single_week_by_person
JOIN Persons person 
    ON person.id = comps_within_single_week_by_person.personId 
    AND person.subId = 1
ORDER BY attended_within_week DESC, person.name;

shortest_time_to_get_all_singles:
WITH all_events_people AS (
    -- Identify people with results in every official event (excluding Magic, Master Magic, and Feet)
    SELECT personId
    FROM RanksSingle
    JOIN Events event ON event.id = eventId
    WHERE event.rank < 900
      AND event.id NOT IN ('magic', 'mmagic', '333ft')
    GROUP BY personId
    HAVING COUNT(eventId) = (SELECT COUNT(*) 
                             FROM Events 
                             WHERE rank < 900 AND id NOT IN ('magic', 'mmagic', '333ft'))
),
person_results AS (
    -- Retrieve results for people who have completed all events
    SELECT
        result.personId,
        '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
        result.eventId,
        TO_DATE(competition.year || '-' || competition.month || '-' || competition.day, 'YYYY-MM-DD') AS result_date
    FROM Results result
    JOIN Persons person ON person.id = result.personId AND person.subId = 1
    JOIN Competitions competition ON competition.id = result.competitionId
    WHERE result.personId IN (SELECT personId FROM all_events_people)
),
first_result AS (
    -- Find the date of the first recorded result for each person
    SELECT
        personId,
        person_link,
        MIN(result_date) AS first_competition_date
    FROM person_results
    GROUP BY personId, person_link
),
last_missing_event_result AS (
    -- Find the date of the last event's first result (completing all events) for each person
    SELECT
        personId,
        MAX(result_date) AS last_event_completion_date
    FROM (
        SELECT
            personId,
            eventId,
            MIN(result_date) AS result_date
        FROM person_results
        GROUP BY personId, eventId
    )
    GROUP BY personId
)
-- Calculate the time difference and order the results
SELECT
    first_result.person_link,
    first_result.first_competition_date,
    last_missing_event_result.last_event_completion_date,
    last_missing_event_result.last_event_completion_date - first_result.first_competition_date AS days_to_complete_all_events
FROM first_result
JOIN last_missing_event_result ON first_result.personId = last_missing_event_result.personId
ORDER BY days_to_complete_all_events ASC
FETCH FIRST 40 ROWS ONLY;

shortest_time_to_get_all_singles_and_averages:
WITH valid_events AS (
    SELECT id AS event_id
    FROM Events
    WHERE rank < 900 AND id NOT IN ('magic', 'mmagic', '333ft', '333mbf')
),
all_events_people AS (
    -- Identify people with single and average results in every valid event
    SELECT single.personId
    FROM RanksSingle single
    JOIN RanksAverage avg 
        ON single.personId = avg.personId 
       AND single.eventId = avg.eventId
       AND single.eventId NOT IN ('333mbf') -- Exclude multi-blind here
    WHERE single.eventId IN (SELECT event_id FROM valid_events)
    GROUP BY single.personId
    HAVING COUNT(single.eventId) = (SELECT COUNT(*) FROM valid_events)
),
person_results AS (
    -- Retrieve results for people who have completed all events
    SELECT
        result.personId,
        '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
        result.eventId,
        TO_DATE(competition.year || '-' || competition.month || '-' || competition.day, 'YYYY-MM-DD') AS result_date
    FROM Results result
    JOIN Persons person ON person.id = result.personId AND person.subId = 1
    JOIN Competitions competition ON competition.id = result.competitionId
    WHERE result.personId IN (SELECT personId FROM all_events_people)
      AND result.eventId NOT IN ('333mbf') -- Exclude multi-blind here as well
),
first_result AS (
    -- Find the date of the first recorded result for each person
    SELECT
        personId,
        person_link,
        MIN(result_date) AS first_competition_date
    FROM person_results
    GROUP BY personId, person_link
),
last_missing_event_result AS (
    -- Find the date of the last event's first result (completing all events) for each person
    SELECT
        personId,
        MAX(result_date) AS last_event_completion_date
    FROM (
        SELECT
            personId,
            eventId,
            MIN(result_date) AS result_date
        FROM person_results
        GROUP BY personId, eventId
    )
    GROUP BY personId
)
-- Calculate the time difference and order the results
SELECT
    first_result.person_link,
    first_result.first_competition_date,
    last_missing_event_result.last_event_completion_date,
    last_missing_event_result.last_event_completion_date - first_result.first_competition_date AS days_to_complete_all_events
FROM first_result
JOIN last_missing_event_result ON first_result.personId = last_missing_event_result.personId
ORDER BY days_to_complete_all_events ASC
FETCH FIRST 40 ROWS ONLY;

most_4th_places:
SELECT
    subquery.fourth_places_count,
    '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link
FROM (
    SELECT
        personId AS id,
        COUNT(*) AS fourth_places_count
    FROM Results
    JOIN RoundTypes round_type ON round_type.id = Results.roundTypeId
    WHERE round_type.final = 1
      AND Results.pos = 4
      AND Results.best > 0
    GROUP BY personId
) subquery
JOIN Persons person ON person.id = subquery.id AND person.subId = 1
ORDER BY subquery.fourth_places_count DESC
FETCH FIRST 100 ROWS ONLY;

most_completed_solves;
SELECT
    person.id,
    '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
    COUNT(CASE WHEN result.value1 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value2 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value3 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value4 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value5 > 0 THEN 1 ELSE NULL END) AS completed_count,
    
    COUNT(CASE WHEN result.value1 = -1 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value2 = -1 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value3 = -1 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value4 = -1 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value5 = -1 THEN 1 ELSE NULL END) AS dnfs_count,
    
    COUNT(CASE WHEN result.value1 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value2 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value3 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value4 > 0 THEN 1 ELSE NULL END) +
    COUNT(CASE WHEN result.value5 > 0 THEN 1 ELSE NULL END) AS total_solves_count
FROM Results result
JOIN Persons person ON person.id = result.personId AND person.subId = 1
JOIN Events event ON event.id = result.eventId
GROUP BY person.id, person.name
ORDER BY total_solves_count DESC
FETCH FIRST 100 ROWS ONLY;

most_visited_countries:
SELECT
    visited_countries,
    '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link
FROM (
    SELECT
        result.personId,
        COUNT(DISTINCT competition.countryId) AS visited_countries
    FROM Results result
    JOIN Competitions competition ON competition.id = result.competitionId
    WHERE competition.countryId NOT IN ('XA', 'XE', 'XF', 'XM', 'XN', 'XO', 'XS', 'XW') -- Exclude specific countries
    GROUP BY result.personId
    ORDER BY visited_countries DESC
    FETCH FIRST 100 ROWS ONLY -- Limit the results to the top 100
) visited_countries_by_person
JOIN Persons person ON person.id = visited_countries_by_person.personId AND person.subId = 1
ORDER BY visited_countries DESC;

average_of_12 (3x3x3 only):
WITH valid_results AS (
  SELECT
    person.name,
    person.id,
    result.eventId AS event_id,
    result.value1,
    result.value2,
    result.value3,
    result.value4,
    result.value5
  FROM Results result
  JOIN Persons person ON person.id = result.personId AND person.subId = 1
  JOIN Competitions competition ON competition.id = result.competitionId
  JOIN RoundTypes round_type ON round_type.id = result.roundTypeId
  JOIN RanksSingle ranks_single ON ranks_single.eventId = result.eventId AND ranks_single.personId = result.personId
  WHERE ranks_single.worldRank <= 200
    AND result.eventId IN ('333')
),
ordered_results AS (
  SELECT
    name,
    id,
    event_id,
    value1, value2, value3, value4, value5,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value1) AS rn_1,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value2) AS rn_2,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value3) AS rn_3,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value4) AS rn_4,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value5) AS rn_5
  FROM valid_results
),
trimmed_results AS (
  SELECT
    name,
    id,
    event_id,
    -- Trim the first 3 and last 3 solves, and calculate the average of the remaining, excluding 0 and -1
    AVG(val) AS ao12
  FROM (
    SELECT
      name,
      id,
      event_id,
      CASE WHEN rn_1 > 3 AND rn_1 <= 8 AND value1 > 0 AND value1 != -1 THEN value1 END AS val
    FROM ordered_results
    UNION ALL
    SELECT
      name,
      id,
      event_id,
      CASE WHEN rn_2 > 3 AND rn_2 <= 8 AND value2 > 0 AND value2 != -1 THEN value2 END AS val
    FROM ordered_results
    UNION ALL
    SELECT
      name,
      id,
      event_id,
      CASE WHEN rn_3 > 3 AND rn_3 <= 8 AND value3 > 0 AND value3 != -1 THEN value3 END AS val
    FROM ordered_results
    UNION ALL
    SELECT
      name,
      id,
      event_id,
      CASE WHEN rn_4 > 3 AND rn_4 <= 8 AND value4 > 0 AND value4 != -1 THEN value4 END AS val
    FROM ordered_results
    UNION ALL
    SELECT
      name,
      id,
      event_id,
      CASE WHEN rn_5 > 3 AND rn_5 <= 8 AND value5 > 0 AND value5 != -1 THEN value5 END AS val
    FROM ordered_results
  )
  GROUP BY name, id, event_id
)
SELECT
    '[' || name || '](https://www.worldcubeassociation.org/persons/' || id || ') AS person_link',
    event_id,
    ao12
FROM trimmed_results
ORDER BY ao12
FETCH FIRST 100 ROWS ONLY;


average_of_100 (3x3x3 only):
WITH valid_results AS (
  SELECT
    person.name,
    person.id,
    result.eventId AS event_id,
    result.value1,
    result.value2,
    result.value3,
    result.value4,
    result.value5
  FROM Results result
  JOIN Persons person ON person.id = result.personId AND person.subId = 1
  JOIN Competitions competition ON competition.id = result.competitionId
  JOIN RoundTypes round_type ON round_type.id = result.roundTypeId
  JOIN RanksSingle ranks_single ON ranks_single.eventId = result.eventId AND ranks_single.personId = result.personId
  WHERE ranks_single.worldRank <= 200
    AND result.eventId IN ('333')
),
ordered_results AS (
  SELECT
    name,
    id,
    event_id,
    value1, value2, value3, value4, value5,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value1) AS rn_1,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value2) AS rn_2,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value3) AS rn_3,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value4) AS rn_4,
    ROW_NUMBER() OVER (PARTITION BY id, event_id ORDER BY value5) AS rn_5
  FROM valid_results
),
trimmed_results AS (
  SELECT
    name,
    id,
    event_id,
    value1, value2, value3, value4, value5
  FROM ordered_results
  WHERE (rn_1 <= 100 AND value1 > 0 AND value1 != -1)
    OR (rn_2 <= 100 AND value2 > 0 AND value2 != -1)
    OR (rn_3 <= 100 AND value3 > 0 AND value3 != -1)
    OR (rn_4 <= 100 AND value4 > 0 AND value4 != -1)
    OR (rn_5 <= 100 AND value5 > 0 AND value5 != -1)
),
total_and_avg AS (
  SELECT
    name,
    id,
    event_id,
    SUM(value1 + value2 + value3 + value4 + value5)/5 AS total_solves,
    COUNT(*) AS solve_count
  FROM trimmed_results
  GROUP BY name, id, event_id
)
SELECT
    event_id,
    '[' || name || '](https://www.worldcubeassociation.org/persons/' || id || ') AS person_link',
    total_solves / solve_count AS avg_of_100
FROM total_and_avg
ORDER BY avg_of_100 ASC
FETCH FIRST 100 ROWS ONLY;

best_first_average (3x3x3 only);
SELECT
    event_id,
    person_link,
    average
FROM (
    SELECT
        result.eventId AS event_id,
        '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
        result.average,
        competition.year,
        competition.month,
        competition.day,
        ROW_NUMBER() OVER (PARTITION BY result.eventId, result.personId ORDER BY competition.year ASC, competition.month ASC, competition.day ASC) AS row_num
    FROM Results result
    JOIN Persons person ON person.id = result.personId AND person.subId = 1
    JOIN Competitions competition ON competition.id = result.competitionId
    JOIN RoundTypes round_type ON round_type.id = result.roundTypeId
    WHERE result.average > 0  -- Ensure the average is positive
    AND result.eventId IN ('333')
)
WHERE row_num = 1  -- Select only the first result for each person in each event
ORDER BY event_id, average
FETCH FIRST 100 ROWS ONLY;

best_first_single (3x3x3 only);
SELECT
    event_id,
    person_link,
    best
FROM (
    SELECT
        result.eventId AS event_id,
        '[' || person.name || '](https://www.worldcubeassociation.org/persons/' || person.id || ')' AS person_link,
        result.best,
        competition.year,
        competition.month,
        competition.day,
        ROW_NUMBER() OVER (PARTITION BY result.eventId, result.personId ORDER BY competition.year ASC, competition.month ASC, competition.day ASC) AS row_num
    FROM Results result
    JOIN Persons person ON person.id = result.personId AND person.subId = 1
    JOIN Competitions competition ON competition.id = result.competitionId
    JOIN RoundTypes round_type ON round_type.id = result.roundTypeId
    WHERE result.best > 0  -- Ensure the average is positive
    AND result.eventId IN ('333')
)
WHERE row_num = 1  -- Select only the first result for each person in each event
ORDER BY event_id, best
FETCH FIRST 100 ROWS ONLY;

longest_standing_records:
WITH latest_records AS (
    SELECT
        result.eventId AS event_id,
        result.regionalSingleRecord AS regional_single_record,
        result.regionalAverageRecord AS regional_average_record,
        result.best AS single,
        result.average,
        person.id AS person_id,
        person.name AS person_name,
        competition.cellName AS competition_name,
        competition.year AS competition_year,
        competition.month AS competition_month,
        competition.day AS competition_day,
        TO_DATE(competition.year || '-' || competition.month || '-' || competition.day, 'YYYY-MM-DD') AS competition_date,
        continent.name AS continent_name
    FROM Results result
    JOIN Persons person ON person.id = result.personId AND person.subId = 1
    JOIN Competitions competition ON competition.id = result.competitionId
    JOIN Countries country ON country.id = result.personcountryId
    JOIN Continents continent ON continent.id = country.continentId
    WHERE (result.regionalSingleRecord IN ('AfR', 'AsR', 'ER', 'NAR', 'OcR', 'SAR', 'WR')
       OR result.regionalAverageRecord IN ('AfR', 'AsR', 'ER', 'NAR', 'OcR', 'SAR', 'WR'))
       AND result.best > 0 AND result.average > 0  -- Exclude -1 and 0 values
),
best_records AS (
    SELECT
        eventId AS event_id,
        MIN(best) AS best_single,
        MIN(average) AS best_average
    FROM Results
    WHERE best > 0 AND average > 0  -- Exclude -1 and 0 values
    GROUP BY eventId
)
SELECT
    lr.regional_single_record AS regional_single_record,
    lr.regional_average_record AS regional_average_record,
    lr.single AS single,
    lr.average AS average,
    '[' || lr.person_name || '](https://www.worldcubeassociation.org/persons/' || lr.person_id || ')' AS person_link,
    '[' || lr.competition_name || '](https://www.worldcubeassociation.org/competitions/' || lr.competition_name || '/results/by_person#' || lr.person_id || ') ' AS results_link,
    lr.competition_date AS competition_date,
    lr.event_id AS event_id,
    lr.continent_name AS continent
FROM latest_records lr
JOIN best_records br ON br.event_id = lr.event_id
WHERE (lr.single = br.best_single OR lr.average = br.best_average)
ORDER BY lr.competition_date
FETCH FIRST 30 ROWS ONLY;
